// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                 @id @default(autoincrement())
  fullName   String
  userName   String              @unique
  password   String
  role       String              @default("user")
  profileImg String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  menus      MenuPermission[]
  subMenus   SubMenuPermission[]
  sections   SectionPermission[]

  @@map("users")
}

model MenuPermission {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  label  String

  @@map("menuPermissions")
}

model SubMenuPermission {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  label  String

  @@map("subMenuPermissions")
}

model SectionPermission {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  label  String

  @@map("sectionPermissions")
}

model Designation {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]

  @@map("designations")
}

model Department {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]

  @@map("departments")
}

model Area {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]

  @@map("areas")
}

model Location {
  id      Int     @id @default(autoincrement())
  label   String  @unique
  areaId  Int?
  area    Area?   @relation(fields: [areaId], references: [id])
  address String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  employees     Employee[]
  fromTransfers Transfer[] @relation("FromLocationName")
  toTransfers   Transfer[] @relation("ToLocationName")

  @@map("locations")
}

model Employee {
  id          Int       @id @default(autoincrement())
  name        String
  officeId    String    @unique
  joiningDate DateTime?
  resignDate  DateTime?

  designationId Int
  designation   Designation @relation(fields: [designationId], references: [id])

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  locationId Int
  location   Location @relation(fields: [locationId], references: [id])

  contactNo String?
  address   String?

  photo    String?
  isActive Boolean @default(true)
  isOwn    Boolean @default(false)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authLogs    AuthLog[]
  attendances Attendance[]
  leaves      Leave[]
  salaries    Salary[]
  transfers   Transfer[]

  @@map("employees")
}

model AuthLog {
  id        Int      @id @default(autoincrement())
  officeId  String
  employee  Employee @relation(fields: [officeId], references: [officeId])
  punchTime DateTime

  @@map("authLogs")
}

model Attendance {
  id        Int       @id @default(autoincrement())
  officeId  String
  employee  Employee  @relation(fields: [officeId], references: [officeId])
  date      DateTime  @default(now())
  inTime    DateTime?
  outTime   DateTime?
  realPunch Boolean   @default(true)

  @@map("attendances")
}

model Leave {
  id       Int      @id @default(autoincrement())
  officeId String
  employee Employee @relation(fields: [officeId], references: [officeId])
  fromDate DateTime
  days     Int
  toDate   DateTime
  remarks  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leaves")
}

model Salary {
  id       Int       @id @default(autoincrement())
  officeId String
  employee Employee  @relation(fields: [officeId], references: [officeId])
  fromDate DateTime
  toDate   DateTime?
  salary   Int       @default(0)
  remarks  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("salaries")
}

model Transfer {
  id             Int      @id @default(autoincrement())
  officeId       String
  employee       Employee @relation(fields: [officeId], references: [officeId], onDelete: NoAction, onUpdate: NoAction)
  date           DateTime
  fromLocationId Int
  fromLocation   Location @relation(fields: [fromLocationId], references: [id], name: "FromLocationName", onDelete: NoAction, onUpdate: NoAction)
  toLocationId   Int
  toLocation     Location @relation(fields: [toLocationId], references: [id], name: "ToLocationName")
  remarks        String?
  isApproved     Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transfers")
}
