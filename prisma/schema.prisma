// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                 @id @default(autoincrement())
  fullName    String
  userName    String              @unique
  password    String
  role        String              @default("user")
  profileImg  String?
  deviceId    String?
  isEmployee  Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  menus       MenuPermission[]
  subMenus    SubMenuPermission[]
  sections    SectionPermission[]
  conveyances Conveyance[]
  bills       Bill[]

  @@map("users")
}

model MenuPermission {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  label  String

  @@map("menuPermissions")
}

model SubMenuPermission {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  label  String

  @@map("subMenuPermissions")
}

model SectionPermission {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  label  String

  @@map("sectionPermissions")
}

model Designation {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]

  @@map("designations")
}

model Department {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]

  @@map("departments")
}

model Area {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]

  @@map("areas")
}

model Location {
  id      Int     @id @default(autoincrement())
  label   String  @unique
  areaId  Int?
  area    Area?   @relation(fields: [areaId], references: [id])
  address String?
  lat     String?
  lon     String?
  weekend String  @default("Friday")

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  employees     Employee[]
  fromTransfers Transfer[] @relation("FromLocationName")
  toTransfers   Transfer[] @relation("ToLocationName")

  @@map("locations")
}

model Employee {
  id          Int       @id @default(autoincrement())
  name        String
  officeId    String    @unique
  joiningDate DateTime?
  resignDate  DateTime?

  designationId Int
  designation   Designation @relation(fields: [designationId], references: [id])

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  locationId Int
  location   Location @relation(fields: [locationId], references: [id])

  contactNo String?
  address   String?

  photo       String?
  isActive    Boolean @default(true)
  isOwn       Boolean @default(false)
  userCreated Boolean @default(false)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  authLogs      AuthLog[]
  attendances   Attendance[]
  leaves        Leave[]
  salaries      Salary[]
  transfers     Transfer[]
  conveyances   Conveyance[]
  bills         Bill[]
  monthSalaries MonthSalary[]

  @@map("employees")
}

model AuthLog {
  id        Int      @id @default(autoincrement())
  officeId  String
  employee  Employee @relation(fields: [officeId], references: [officeId])
  punchTime DateTime

  @@map("authLogs")
}

model Attendance {
  id        Int       @id @default(autoincrement())
  officeId  String
  employee  Employee  @relation(fields: [officeId], references: [officeId])
  date      DateTime  @default(now())
  inTime    DateTime?
  outTime   DateTime?
  deviceId  String?
  location  String?
  realPunch Boolean   @default(true)

  @@map("attendances")
}

model Leave {
  id       Int      @id @default(autoincrement())
  officeId String
  employee Employee @relation(fields: [officeId], references: [officeId])
  fromDate DateTime
  days     Int
  toDate   DateTime
  remarks  String?
  status   String   @default("Pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leaves")
}

model Salary {
  id       Int       @id @default(autoincrement())
  officeId String
  employee Employee  @relation(fields: [officeId], references: [officeId])
  fromDate DateTime
  toDate   DateTime?
  salary   Int       @default(0)
  remarks  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("salaries")
}

model Transfer {
  id             Int      @id @default(autoincrement())
  officeId       String
  employee       Employee @relation(fields: [officeId], references: [officeId], onDelete: NoAction, onUpdate: NoAction)
  date           DateTime
  fromLocationId Int
  fromLocation   Location @relation(fields: [fromLocationId], references: [id], name: "FromLocationName", onDelete: NoAction, onUpdate: NoAction)
  toLocationId   Int
  toLocation     Location @relation(fields: [toLocationId], references: [id], name: "ToLocationName")
  remarks        String?
  isApproved     Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transfers")
}

model ItemType {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  conveyanceDetails ConveyanceDetail[]

  @@map("itemTypes")
}

model VehicleType {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  conveyanceDetails ConveyanceDetail[]

  @@map("vehicleTypes")
}

model Conveyance {
  id       Int      @id @default(autoincrement())
  officeId String
  employee Employee @relation(fields: [officeId], references: [officeId])
  date     DateTime
  amount   Int
  remarks  String?
  status   String   @default("Pending")

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  conveyanceDetails ConveyanceDetail[]

  @@map("conveyances")
}

model ConveyanceDetail {
  id            Int          @id @default(autoincrement())
  conveyanceId  Int
  conveyance    Conveyance   @relation(fields: [conveyanceId], references: [id])
  itemTypeId    Int
  itemType      ItemType     @relation(fields: [itemTypeId], references: [id])
  from          String?
  to            String?
  distance      Int          @default(0)
  vehicleTypeId Int?
  vehicleType   VehicleType? @relation(fields: [vehicleTypeId], references: [id])
  details       String?
  amount        Int
  remarks       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conveyanceDetails")
}

model Bill {
  id        Int      @id @default(autoincrement())
  isService Boolean  @default(false)
  officeId  String
  employee  Employee @relation(fields: [officeId], references: [officeId])
  date      DateTime
  amount    Int
  remarks   String?
  status    String   @default("Pending")

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  billDetails BillDetail[]

  @@map("bills")
}

model Item {
  id        Int     @id @default(autoincrement())
  label     String  @unique
  isService Boolean @default(false)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  billDetails BillDetail[]

  @@map("items")
}

model Shop {
  id      Int     @id @default(autoincrement())
  label   String  @unique
  address String?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  billDetails BillDetail[]

  @@map("shops")
}

model Uom {
  id    Int    @id @default(autoincrement())
  label String @unique

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  billDetails BillDetail[]

  @@map("uom")
}

model BillDetail {
  id       Int     @id @default(autoincrement())
  billId   Int
  bill     Bill    @relation(fields: [billId], references: [id])
  itemId   Int
  item     Item    @relation(fields: [itemId], references: [id])
  shopId   Int?
  shop     Shop?   @relation(fields: [shopId], references: [id])
  details  String?
  uomId    Int?
  uom      Uom?    @relation(fields: [uomId], references: [id])
  quantity Float?
  amount   Int
  remarks  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("billDetails")
}

model MonthSalary {
  id          Int      @id @default(autoincrement())
  month       String
  year        String
  officeId    String
  employee    Employee @relation(fields: [officeId], references: [officeId])
  totalDays   Int
  weekends    Int
  workingDays Int
  presents    Int
  lateCounts  Int
  leaves      Int
  absents     Int
  salary      Int
  earnSalary  Int
  deduction   Int
  isAccepted  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("monthSalaries")
}
